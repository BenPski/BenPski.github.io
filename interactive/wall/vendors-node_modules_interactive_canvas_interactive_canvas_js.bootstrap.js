"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcreate_wasm_app"] = self["webpackChunkcreate_wasm_app"] || []).push([["vendors-node_modules_interactive_canvas_interactive_canvas_js"],{

/***/ "./node_modules/interactive_canvas/interactive_canvas.js":
/*!***************************************************************!*\
  !*** ./node_modules/interactive_canvas/interactive_canvas.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InteractiveCanvas: () => (/* binding */ InteractiveCanvas)\n/* harmony export */ });\n// largely yoinked from http://phrogz.net/tmp/canvas_zoom_to_cursor.html\nclass InteractiveCanvas {\n    constructor(canvas, draw) {\n        this.canvas = canvas;\n        let ctx = canvas.getContext('2d');\n        this.draw = draw;\n        this.ctx = this.trackTransforms(ctx);\n        this.redraw();\n        this.lastX=this.canvas.width/2;\n        this.lastY=this.canvas.height/2;\n        this.dragStart=null;\n        this.scaleStart=null;\n        this.touches=[];\n        this.scaleFactor = 1.1;\n        this.animationId = null;\n        // I don't understand why bind is necessary, but 'this' isn't properly\n        // captured otherwise in the listener methods\n        this.mouseDownListener = this.handleMouseDown.bind(this);\n        this.mouseMoveListener = this.handleMouseMove.bind(this);\n        this.mouseUpListener = this.handleMouseUp.bind(this);\n        this.scrollListener = this.handleScroll.bind(this);\n        this.touchStartListener = this.handleTouchStart.bind(this);\n        this.touchMoveListener = this.handleTouchMove.bind(this);\n        this.touchEndListener = this.handleTouchEnd.bind(this);\n\n    }\n\n    setup_listeners() {\n        this.canvas.addEventListener('mousedown',this.mouseDownListener, false);\n        this.canvas.addEventListener('mousemove',this.mouseMoveListener, false);\n        this.canvas.addEventListener('mouseup',this.mouseUpListener,false);\n        this.canvas.addEventListener('DOMMouseScroll',this.scrollListener,false);\n        this.canvas.addEventListener('mousewheel',this.scrollListener,false);\n        this.canvas.addEventListener('touchstart',this.touchStartListener,false);\n        this.canvas.addEventListener('touchmove',this.touchMoveListener,false);\n        this.canvas.addEventListener('touchend',this.touchEndListener,false);\n        this.canvas.addEventListener('touchcancel',this.touchEndListener,false);\n    }\n\n    remove_listeners() {\n        this.canvas.removeEventListener('mousedown',this.mouseDownListener, false);\n        this.canvas.removeEventListener('mousemove',this.mouseMoveListener, false);\n        this.canvas.removeEventListener('mouseup',this.mouseUpListener,false);\n        this.canvas.removeEventListener('DOMMouseScroll',this.scrollListener,false);\n        this.canvas.removeEventListener('mousewheel',this.scrollListener,false);\n        this.canvas.addEventListener('touchstart',this.touchStartListener,false);\n        this.canvas.addEventListener('touchmove',this.touchMoveListener,false);\n        this.canvas.addEventListener('touchend',this.touchEndListener,false);\n        this.canvas.addEventListener('touchcancel',this.touchEndListener,false);\n    }\n\n    clear() {\n        // Clear the entire canvas\n        let p1 = this.ctx.transformedPoint(0,0);\n        let p2 = this.ctx.transformedPoint(this.canvas.width,this.canvas.height);\n        this.ctx.clearRect(p1.x,p1.y,p2.x-p1.x,p2.y-p1.y);\n    }\n\n    redraw() {\n        this.clear();\n        this.draw(this.ctx);\n    }\n\n    zoom(clicks){\n        let pt = this.ctx.transformedPoint(this.lastX,this.lastY);\n        this.ctx.translate(pt.x,pt.y);\n        let factor = Math.pow(this.scaleFactor,clicks);\n        this.ctx.scale(factor,factor);\n        this.ctx.translate(-pt.x,-pt.y);\n        this.redraw();\n    }\n\n    handleMouseDown(evt) {\n        this.lastX = evt.offsetX || (evt.pageX - this.canvas.offsetLeft);\n        this.lastY = evt.offsetY || (evt.pageY - this.canvas.offsetTop);\n        this.dragStart = this.ctx.transformedPoint(this.lastX,this.lastY);\n    }\n\n    handleMouseMove(evt) {\n        this.lastX = evt.offsetX || (evt.pageX - this.canvas.offsetLeft);\n        this.lastY = evt.offsetY || (evt.pageY - this.canvas.offsetTop);\n        if (this.dragStart){\n            let pt = this.ctx.transformedPoint(this.lastX,this.lastY);\n            this.ctx.translate(pt.x-this.dragStart.x,pt.y-this.dragStart.y);\n            this.redraw();\n        }\n    }\n\n    handleMouseUp(evt) {\n        this.dragStart = null;\n    }\n\n    handleScroll(evt) {\n        let delta = evt.wheelDelta ? evt.wheelDelta/40 : evt.detail ? -evt.detail : 0;\n        if (delta) this.zoom(delta);\n        return evt.preventDefault() && false;\n    };\n\n    handleTouchStart(evt) {\n        evt.preventDefault();\n        const touches = evt.changedTouches;\n        for (let i=0; i<touches.length; i++) {\n            this.touches.push(touches[i]);\n        }\n        let points = [];\n        for (let i=0; i<this.touches.length; i++) {\n            points.push(this.ctx.transformedPoint(this.touches[i].pageX, this.touches[i].pageY));\n        }\n        let center = centroid(points);\n        this.lastX = center.x;\n        this.lastY = center.y;\n        this.dragStart = {x:this.lastX, y:this.lastY};\n        this.scaleStart = averageDistance(points, center);\n    }\n\n    handleTouchMove(evt) {\n        evt.preventDefault();\n        const touches = evt.touches;\n        let points = [];\n        for (let i=0; i<touches.length; i++) {\n            let idx = this.getTouchIndex(touches[i]);\n            if (idx >= 0) {\n                let touch_curr = touches[i];\n                points.push(this.ctx.transformedPoint(touch_curr.pageX, touch_curr.pageY));\n            } else {\n                console.log(\"A touch seems to have appeared without a start event\", touches[i]); \n            }\n        }\n        let center = centroid(points);\n        this.lastX = center.x;\n        this.lastY = center.y;\n        if (this.dragStart) {\n            let pt = {x: this.lastX, y: this.lastY};\n            this.ctx.translate(pt.x-this.dragStart.x,pt.y-this.dragStart.y);\n        }\n\n        if (points.length > 1) {\n            let scale_new = averageDistance(points, center);\n            let scale = scale_new/this.scaleStart;\n            let pt = this.ctx.transformedPoint(this.lastX,this.lastY);\n            this.ctx.translate(pt.x,pt.y);\n            this.ctx.scale(scale,scale);\n            this.ctx.translate(-pt.x,-pt.y);\n        }\n    }\n\n    handleTouchEnd(evt) {\n        evt.preventDefault();\n        const touches = evt.changedTouches;\n        for (let i=0; i<touches.length; i++) {\n            let idx = this.getTouchIndex(touches[i]);\n            if (idx >= 0) {\n                this.touches.splice(idx, 1);\n            } else {\n                console.log(\"A touch seems to have appeared without a start event\", touches[i]); \n            }\n        }\n        if (this.touches.length == 0) {\n            this.dragStart = null;\n            this.scaleStart = null;\n        } else {\n            let points = [];\n            for (let i=0; i<this.touches.length; i++) {\n                points.push(this.ctx.transformedPoint(this.touches[i].pageX, this.touches[i].pageY));\n            }\n            let center = centroid(points);\n            this.lastX = center.x;\n            this.lastY = center.y;\n            this.dragStart = {x:this.lastX, y:this.lastY};\n            this.scaleStart = averageDistance(points, center);\n        }\n    }\n\n    getTouchIndex(touch) {\n        for (let j=0; j<this.touches.length; j++) {\n            if (this.touches[j].identifier == touch.identifier) {\n                return j;\n            }\n        }\n        return -1;\n    }\n\n    // Adds ctx.getTransform() - returns a DOMMatrix\n    // Adds ctx.transformedPoint(x,y) - returns an DOMPoint\n    trackTransforms(ctx){\n        let xform = new DOMMatrix();\n        ctx.getTransform = function(){ return xform; };\n        \n        let savedTransforms = [];\n        let save = ctx.save;\n        ctx.save = function(){\n            savedTransforms.push(xform.translate(0,0));\n            return save.call(ctx);\n        };\n        let restore = ctx.restore;\n        ctx.restore = function(){\n            xform = savedTransforms.pop();\n            return restore.call(ctx);\n        };\n\n        let scale = ctx.scale;\n        ctx.scale = function(sx,sy){\n            xform = xform.scale(sx,sy);\n            return scale.call(ctx,sx,sy);\n        };\n        let rotate = ctx.rotate;\n        ctx.rotate = function(radians){\n            xform = xform.rotate(radians*180/Math.PI);\n            return rotate.call(ctx,radians);\n        };\n        let translate = ctx.translate;\n        ctx.translate = function(dx,dy){\n            xform = xform.translate(dx,dy);\n            return translate.call(ctx,dx,dy);\n        };\n        let transform = ctx.transform;\n        ctx.transform = function(a,b,c,d,e,f){\n            let m2 = new DOMMatrix(); //svg.createSVGMatrix();\n            m2.a=a; m2.b=b; m2.c=c; m2.d=d; m2.e=e; m2.f=f;\n            xform = xform.multiply(m2);\n            return transform.call(ctx,a,b,c,d,e,f);\n        };\n        let setTransform = ctx.setTransform;\n        ctx.setTransform = function(a,b,c,d,e,f){\n            xform.a = a;\n            xform.b = b;\n            xform.c = c;\n            xform.d = d;\n            xform.e = e;\n            xform.f = f;\n            return setTransform.call(ctx,a,b,c,d,e,f);\n        };\n        let pt  = new DOMPoint();\n        ctx.transformedPoint = function(x,y){\n            pt.x=x; pt.y=y;\n            return pt.matrixTransform(xform.inverse());\n        }\n        return ctx;\n    }\n\n    renderLoop() {\n        this.redraw();\n        this.animationId = requestAnimationFrame((x) => this.renderLoop(x));\n    }\n\n    start() {\n        if (this.animationId === null) {\n            this.setup_listeners();\n            this.renderLoop();\n        }\n    }\n\n    stop() {\n        if (this.animationId !== null) {\n            cancelAnimationFrame(this.animationId);\n            this.remove_listeners();\n            this.animationId = null;\n        }\n    }\n}\n\nfunction centroid(points) {\n    let x = 0;\n    let y = 0;\n    for (let i=0; i<points.length; i++) {\n        x += points[i].x;\n        y += points[i].y;\n    }\n    return {x: x/points.length, y: y/points.length};\n}\n\nfunction averageDistance(points, center) {\n    let dist = 0;\n    for (let i=0; i<points.length; i++) {\n        dist += Math.sqrt((points[i].x-center.x)**2 + (points[i].y-center.y)**2);\n    }\n    return dist/points.length;\n}\n\n\n//# sourceURL=webpack://create-wasm-app/./node_modules/interactive_canvas/interactive_canvas.js?");

/***/ })

}]);